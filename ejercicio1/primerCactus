	.equ SCREEN_WIDTH, 		640
	.equ SCREEN_HEIGH, 		480
	.equ BITS_PER_PIXEL,  	32

	.equ GPIO_BASE,      0x3f200000
	.equ GPIO_GPFSEL0,   0x00
	.equ GPIO_GPLEV0,    0x34

	.globl main

main:
				// x0 contiene la direccion base del framebuffer
 	mov x20, x0	// Guarda la dirección base del framebuffer en x20

	//---------------- CODE HERE ------------------------------------

	movz x10, 0xC7, lsl 16
	movk x10, 0x1585, lsl 00

	mov x2, SCREEN_HEIGH         // Y Size
loop1:
	mov x1, SCREEN_WIDTH         // X Size
loop0:
	stur w10,[x0]  // Colorear el pixel N
	add x0,x0,4	   // Siguiente pixel
	sub x1,x1,1	   // Decrementar contador X
	cbnz x1,loop0  // Si no terminó la fila, salto
	sub x2,x2,1	   // Decrementar contador Y
	cbnz x2,loop1  // Si no es la última fila, salto


 	//Dibujo rectangulo

 	//color rectangulo largo

 	movz x15, 0xf, lsl 16
 	movk x15, 0xa661, lsl 00

 	mov x3, SCREEN_WIDTH
 	mov x4, SCREEN_HEIGH
 	mov x5, SCREEN_WIDTH
 	mov x11, 5
 	mov x12, 3

 	lsr x3, x3, 4 // x3 div 16 ==> ancho div 16= 40 coord x
 	lsr x4, x4, 3 // x4 div 8 ==> largo div 8=60 coord y

 	mul x3,x3, x12 //empiezo en 120
 	mul x4,x4,x11 // empiezo en 300

 	//coordenadas inicio en la esquina superior izq

 	sub x3,x3,20 // resto 20 a la coord x para empezar desde ahi el dibujo
 	sub x4,x4,90 // resto 90 a la coord y para empezar desde ahi el dibujo

 	//registro contador de filas, que ira desde 0...179
 	mov x6,0

 	dib_rec_filaV:

 		//registro contador de cols, que ira desde 0...39
 		mov x7,0

 		dib_rec_colV:

 			//calculo la direccion del pixel a pintar: add=base_framebuffer + 4* ((y + x6) *SCREEN_WIDTH + (x + x7))
 			
 			mov x8, x4 		//x4 ---> y <== x8
 			add x8,x8, x6	// y actual = x8
 			mul x8,x8,x5 	// (y + x6) *SCREEN_WIDTH

 			add x9, x3,x7 	// x actual <== x9
 			add x8, x8, x9 	//(y + x6) *SCREEN_WIDTH + (x + x7)

 			lsl x8,x8, 2 	//4* ((y + x6) *SCREEN_WIDTH + (x + x7))

 			add x8,x20,x8 	// inicio

 			stur w15, [x8] 	// pixel rec verde

 			add x7, x7,1 	//me muevo sig column
 			cmp x7, 40

 			b.lt dib_rec_colV

 		add x6,x6,1
 		cmp x6, 180

 		b.lt dib_rec_filaV




//------------------------------------------------------CRUZ



 		//Dibujo rectangulo horiz prim cuadrante

 	//color rectangulo largo

 	movz x15, 0xf, lsl 16
 	movk x15, 0xa661, lsl 00

 	mov x3, SCREEN_WIDTH
 	mov x4, SCREEN_HEIGH
 	mov x5, SCREEN_WIDTH
 	mov x11, 11
 	mov x12, 2

 	lsr x3, x3, 4 // x3 div 16 ==> ancho div 16= 40 coord x
 	lsr x4, x4, 4 // x4 div 16 ==> largo div 16=30 coord y

 	mul x3,x3, x12 //empiezo en 80
 	mul x4,x4,x11 // empiezo en 330

 	//coordenadas inicio en la esquina superior izq

 	sub x3,x3,40 // resto 40 a la coord x para empezar desde ahi el dibujo
 	sub x4,x4,15 // resto 15 a la coord y para empezar desde ahi el dibujo

 	//registro contador de filas, que ira desde 0...29
 	mov x6,0

 	dib_rec_fila:

 		//registro contador de cols, que ira desde 0...179
 		mov x7,0

 		dib_rec_col:

 			//calculo la direccion del pixel a pintar: add=base_framebuffer + 4* ((y + x6) *SCREEN_WIDTH + (x + x7))
 			
 			mov x8, x4 		//x4 ---> y <== x8
 			add x8,x8, x6	// y actual = x8
 			mul x8,x8,x5 	// (y + x6) *SCREEN_WIDTH

 			add x9, x3,x7 	// x actual <== x9
 			add x8, x8, x9 	//(y + x6) *SCREEN_WIDTH + (x + x7)

 			lsl x8,x8, 2 	//4* ((y + x6) *SCREEN_WIDTH + (x + x7))

 			add x8,x20,x8 	// inicio

 			stur w15, [x8] 	// pixel rec verde

 			add x7, x7,1 	//me muevo sig column
 			cmp x7, 180

 			b.lt dib_rec_col

 		add x6,x6,1
 		cmp x6, 30

 		b.lt dib_rec_fila








//*****************************************************************************************
	//Dibujo cuad horiz prim cuadrante izq arriba

 	//color rectangulo largo

 	movz x15, 0xf, lsl 16
 	movk x15, 0xa661, lsl 00

 	mov x3, SCREEN_WIDTH
 	mov x4, SCREEN_HEIGH
 	mov x5, SCREEN_WIDTH
 	mov x11, 8
 	mov x12, 5

 	lsr x3, x3, 5 // x3 div 16 ==> ancho div 16= 40 coord x
 	lsr x4, x4, 4 // x4 div 16 ==> largo div 16=30 coord y

 	mul x3,x3, x12 //empiezo en 80
 	mul x4,x4,x11 // empiezo en 330

 	//coordenadas inicio en la esquina superior izq

 	sub x3,x3,20 // resto 40 a la coord x para empezar desde ahi el dibujo
 	sub x4,x4,15 // resto 15 a la coord y para empezar desde ahi el dibujo

 	//registro contador de filas, que ira desde 0...19
 	mov x6,0

 	dib_cuad_fila:

 		//registro contador de cols, que ira desde 0...19
 		mov x7,0

 		dib_cuad_col:

 			//calculo la direccion del pixel a pintar: add=base_framebuffer + 4* ((y + x6) *SCREEN_WIDTH + (x + x7))
 			
 			mov x8, x4 		//x4 ---> y <== x8
 			add x8,x8, x6	// y actual = x8
 			mul x8,x8,x5 	// (y + x6) *SCREEN_WIDTH

 			add x9, x3,x7 	// x actual <== x9
 			add x8, x8, x9 	//(y + x6) *SCREEN_WIDTH + (x + x7)

 			lsl x8,x8, 2 	//4* ((y + x6) *SCREEN_WIDTH + (x + x7))

 			add x8,x20,x8 	// inicio

 			stur w15, [x8] 	// pixel rec verde

 			add x7, x7,1 	//me muevo sig column
 			cmp x7, 20

 			b.lt dib_cuad_col

 		add x6,x6,1
 		cmp x6, 20

 		b.lt dib_cuad_fila






//---------------------------------------------------------------
//---------------------------------------------------------------

	//

 	//

 	movz x15, 0xf, lsl 16
 	movk x15, 0xa661, lsl 00

 	mov x3, SCREEN_WIDTH
 	mov x4, SCREEN_HEIGH
 	mov x5, SCREEN_WIDTH
 	mov x11, 9
 	mov x12, 4

 	lsr x3, x3, 4 // x3 div 16 ==> ancho div 16= 40 coord x
 	lsr x4, x4, 4 // x4 div 16 ==> largo div 16=30 coord y

 	mul x3,x3, x12 //empiezo en 80
 	mul x4,x4,x11 // empiezo en 330

 	//coordenadas inicio en la esquina superior izq

 	add x3,x3,10 // resto 10 a la coord x para empezar desde ahi el dibujo
 	sub x4,x4,15 // resto 15 a la coord y para empezar desde ahi el dibujo

 	//registro contador de filas, que ira desde 0...59
 	mov x6,0

 	dib_rectiVer_fila:

 		//registro contador de cols, que ira desde 0...29
 		mov x7,0

 		dib_rectiVer_col:

 			//calculo la direccion del pixel a pintar: add=base_framebuffer + 4* ((y + x6) *SCREEN_WIDTH + (x + x7))
 			
 			mov x8, x4 		//x4 ---> y <== x8
 			add x8,x8, x6	// y actual = x8
 			mul x8,x8,x5 	// (y + x6) *SCREEN_WIDTH

 			add x9, x3,x7 	// x actual <== x9
 			add x8, x8, x9 	//(y + x6) *SCREEN_WIDTH + (x + x7)

 			lsl x8,x8, 2 	//4* ((y + x6) *SCREEN_WIDTH + (x + x7))

 			add x8,x20,x8 	// inicio

 			stur w15, [x8] 	// pixel rec verde

 			add x7, x7,1 	//me muevo sig column
 			cmp x7, 30

 			b.lt dib_rectiVer_col

 		add x6,x6,1
 		cmp x6, 60

 		b.lt dib_rectiVer_fila






//---------------------------------------------------------------
//*****************************************************************************************


















	// Ejemplo de uso de gpios
	mov x9, GPIO_BASE

	// Atención: se utilizan registros w porque la documentación de broadcom
	// indica que los registros que estamos leyendo y escribiendo son de 32 bits

	// Setea gpios 0 - 9 como lectura
	str wzr, [x9, GPIO_GPFSEL0]

	// Lee el estado de los GPIO 0 - 31
	ldr w10, [x9, GPIO_GPLEV0]

	// And bit a bit mantiene el resultado del bit 2 en w10
	and w11, w10, 0b10

	// w11 será 1 si había un 1 en la posición 2 de w10, si no será 0
	// efectivamente, su valor representará si GPIO 2 está activo
	lsr w11, w11, 1

	//---------------------------------------------------------------
	// Infinite Loop

InfLoop:
	b InfLoop
